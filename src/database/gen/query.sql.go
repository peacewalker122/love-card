// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createCard = `-- name: CreateCard :one
INSERT INTO card (letter, created_at, author)
VALUES ($1,$2,$3)
RETURNING letter, created_at, author
`

type CreateCardParams struct {
	Letter    string
	CreatedAt time.Time
	Author    string
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (Card, error) {
	row := q.db.QueryRow(ctx, createCard, arg.Letter, arg.CreatedAt, arg.Author)
	var i Card
	err := row.Scan(&i.Letter, &i.CreatedAt, &i.Author)
	return i, err
}

const getCard = `-- name: GetCard :many
SELECT letter, created_at, author FROM card
`

func (q *Queries) GetCard(ctx context.Context) ([]Card, error) {
	rows, err := q.db.Query(ctx, getCard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(&i.Letter, &i.CreatedAt, &i.Author); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
