// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createCard = `-- name: CreateCard :one
INSERT INTO card (letter, created_at, author)
VALUES ($1,$2,$3)
RETURNING letter, created_at, author
`

type CreateCardParams struct {
	Letter    string
	CreatedAt time.Time
	Author    string
}

type CreateCardRow struct {
	Letter    string
	CreatedAt time.Time
	Author    string
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (CreateCardRow, error) {
	row := q.db.QueryRow(ctx, createCard, arg.Letter, arg.CreatedAt, arg.Author)
	var i CreateCardRow
	err := row.Scan(&i.Letter, &i.CreatedAt, &i.Author)
	return i, err
}

const getCard = `-- name: GetCard :many
WITH search_results AS (
    SELECT
        card.letter,
        card.author,
        card.created_at,
        to_tsvector('english', card.letter) || to_tsvector('english', card.author) AS document
    FROM
        card
),
query AS (
    SELECT
        $1::text AS search_term
),
recommendations AS (
    SELECT
        letter,
        author,
        created_at
    FROM
        card
    ORDER BY
        created_at DESC
    LIMIT 10
)
SELECT
    sr.letter,
    sr.author,
    sr.created_at
FROM
    search_results sr, query q
WHERE
    q.search_term IS NOT NULL AND q.search_term != ''
    AND (sr.document @@ to_tsquery('english', q.search_term))

UNION ALL

SELECT
    rec.letter,
    rec.author,
    rec.created_at
FROM
    recommendations rec, query q
WHERE
    q.search_term IS NULL OR q.search_term = ''
`

type GetCardRow struct {
	Letter    string
	Author    string
	CreatedAt time.Time
}

func (q *Queries) GetCard(ctx context.Context, dollar_1 string) ([]GetCardRow, error) {
	rows, err := q.db.Query(ctx, getCard, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCardRow
	for rows.Next() {
		var i GetCardRow
		if err := rows.Scan(&i.Letter, &i.Author, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
